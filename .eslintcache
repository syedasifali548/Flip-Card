[{"E:\\Assignments\\React\\my-coding\\src\\index.js":"1","E:\\Assignments\\React\\my-coding\\src\\components\\Todo.js":"2","E:\\Assignments\\React\\my-coding\\src\\App.js":"3","E:\\Assignments\\React\\my-coding\\src\\components\\Game\\Game.js":"4","E:\\Assignments\\React\\my-coding\\src\\components\\Game\\Card\\Card.js":"5"},{"size":562,"mtime":1634732042663,"results":"6","hashOfConfig":"7"},{"size":3437,"mtime":1651405664268,"results":"8","hashOfConfig":"7"},{"size":226,"mtime":1658668427505,"results":"9","hashOfConfig":"7"},{"size":2759,"mtime":1658688912222,"results":"10","hashOfConfig":"7"},{"size":634,"mtime":1658688260033,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1nsfg54",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Assignments\\React\\my-coding\\src\\index.js",[],["24","25"],"E:\\Assignments\\React\\my-coding\\src\\components\\Todo.js",["26","27"],"import React, { useEffect, useState } from \"react\";\r\nimport \"../App.css\";\r\n\r\n// to get the data from localstorage\r\nconst getLocalData = () => {\r\n  const lists = localStorage.getItem(\"todoList\");\r\n  if (lists) {\r\n    return JSON.parse(lists);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\nconst Todo = () => {\r\n  const [inputdata, setInputdata] = useState(\"\");\r\n  const [item, setItem] = useState(getLocalData);\r\n  const [itemEdit, setItemEdit] = useState(\"\");\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  // Add new data to todo List\r\n  const addItem = () => {\r\n    if (!inputdata) {\r\n      alert(\"You can add empty data\");\r\n    } else if (inputdata && toggle) {\r\n      setItem(\r\n        item.map((cElem) => {\r\n          if (cElem.id === editItem) {\r\n            return { ...cElem, names: inputdata };\r\n          }\r\n          return cElem;\r\n        })\r\n      );\r\n      setInputdata(\"\");\r\n      setItemEdit(null);\r\n      setToggle(false);\r\n    } else {\r\n      const newInputData = {\r\n        id: new Date().getTime().toString(),\r\n        names: inputdata,\r\n      };\r\n      setItem([...item, newInputData]);\r\n      setInputdata(\"\");\r\n    }\r\n  };\r\n  //    Delete item\r\n  const deleteItem = (i) => {\r\n    const updatedTodoList = item.filter((cElem) => {\r\n      return cElem.id !== i;\r\n    });\r\n    setItem(updatedTodoList);\r\n  };\r\n  //Remove All Items\r\n  const removeAll = () => {\r\n    setItem([]);\r\n  };\r\n  //   add data to local storage\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todoList\", JSON.stringify(item));\r\n  }, [item]);\r\n  // Edit Todo Item\r\n  const editItem = (i) => {\r\n    const editTodoItem = item.find((cElem) => {\r\n      return cElem.id === i;\r\n    });\r\n    setInputdata(editTodoItem.names);\r\n    setItemEdit(i);\r\n    setToggle(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"main-div\">\r\n        <div className=\"child-div\">\r\n          <figure>\r\n            <img\r\n              src=\"https://cdn.iconscout.com/icon/premium/png-256-thumb/todo-list-1540192-1305387.png\"\r\n              alt=\"image\"\r\n            />\r\n            <figcaption>Create Your ToDo List</figcaption>\r\n          </figure>\r\n          <div className=\"addItems\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Add items\"\r\n              value={inputdata}\r\n              onChange={(e) => setInputdata(e.target.value)}\r\n            />\r\n            <i className=\"fa fa-plus add-btn\" onClick={addItem}></i>\r\n          </div>\r\n\r\n          <div className=\"showItems\">\r\n            {item?.map((cElem) => {\r\n              return (\r\n                <div className=\"eachItem\" key={cElem?.id}>\r\n                  <h3>{cElem?.names}</h3>\r\n                  <i\r\n                    className=\"fa fa-edit add-btn\"\r\n                    title=\"Edit Item\"\r\n                    onClick={() => editItem(cElem.id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"fa fa-trash-alt add-btn\"\r\n                    title=\"Delete Item\"\r\n                    onClick={() => deleteItem(cElem.id)}\r\n                  ></i>\r\n                </div>\r\n              );\r\n            })}\r\n\r\n            {/*clear all button */}\r\n          </div>\r\n          <button\r\n            className=\"btn effect04\"\r\n            data-sm-link-text=\"Remove All\"\r\n            onClick={removeAll}\r\n          >\r\n            <span>CHECK LIST</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","E:\\Assignments\\React\\my-coding\\src\\App.js",[],"E:\\Assignments\\React\\my-coding\\src\\components\\Game\\Game.js",[],"E:\\Assignments\\React\\my-coding\\src\\components\\Game\\Card\\Card.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":18,"column":10,"nodeType":"34","messageId":"35","endLine":18,"endColumn":18},{"ruleId":"36","severity":1,"message":"37","line":77,"column":6,"nodeType":"38","endLine":77,"endColumn":113},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'itemEdit' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]